타입스크립트!!!!!
2012년에 발표 대규모 javascript 애플리케이션 개발
microsoft오픈소스 프로그래밍 언어
-자바스크립트의 상위 집합
-자바스크립트를 사용, 모든 기능 포함
-자바스크립트에 포함되지 않는 새로운 기능
-정적인 언어
*자바스크립트와 가장 큰 차이!!!!!!
자바스크립트는 동적인 언어이며 프로그램 구동 중에 타입이 다이나믹하게 변경되나 타입스크립트는 정적인언어이며
프로그램을 작성할 때 타입을 정의함


웹브라우져가 해석할수 있는 언어
html, css, javascript
typtescript



//////////////////////////////////////////
this 바인딩 메소드
this ====> window
user.print()

함수호출에서 사용할 this를 바인딩(지정)
function pringName(){
	console.log(this.name);
}

printName()




call()
apply()
함수 매개변수를 처리하는 방법을 제외하면 call과 동일함
call은 일반적인 함수와 같이 매개변수를 직접받지만 apply배열로 받는다!!!!
update.call(green, 1998, "teacher")
update.apply(green, [1998, "teacher"])

bind()
함수에서 사용할 this 영구적으로 지정
사용방법
const updatebella = 함수.bind(this 대상객체)
updatebella(1980, "police");


/////
Enum 열거형 타입
숫자 혹은 문자열 값 집합에 이름을 부여할 수 있는 타입
값의 종류가 일정한 범위로 정해져 있는 경우 유용함.
구문 enum name {
	값1,
	값2,
	값3
	}


interface 타입스크립트의 여러 객체를 정의하는 일종의 규칙이며 구조이다

1. 객체의 타입정의
객체타입의 interface
interface 인터페이스이름 {
	readonly key:key 타입;
	key?: key타입
}
2. 함수의 타입정의
함수타입의 interface
interface 인터페이스 이름{
	호출 시그니쳐 정의
	(parameter: paremetertype): return type
}
3. 클래스의 타입정의



====================================2/17
함수 오버로드
이름은 같고 매개변수 타입과 반환타입이 다른 여러 함수를 만들 수 있음
다양한 구조의 함수를 생성하고 관리할 수 있음

선언부
function add(a:string, b: string): string;
function add(a:number, b:number): number;
function add(a: any, b: any) : any{
	return a + b;
}

구현부


===========================이부분은 꼭 기억해줄것
함수

function add(a,b){
	return a +b
}

리턴타입 지정시 리턴이 없는 경우 void
function add(a: number, b: number) : number {
	return a + b
} 
let add: (a:number, b: number) => number;
add = function(a,b){
	return a + b
}

add = (a,b) => {return a + b}
===================================
볷븝
함수에서 사용할 this를 지정
function printuser(age, isjob){
	console.log(this.name)
}

green = {name: "green", age: 30}
printuser.call(green, 30, true);
printuser.apply(green,[30,true]);
const fn = printuser.bind(green)
fn(30,true)


call()
apply()
bind()



//////////////
Generic 제네릭
재사용을 목적으로 함수나 클래스의 선언 시점이 아닌 사용 시점에 타입을 선언
타입을 인수로 받아서 사용

타입변수는 사용자가 제공한 타입으로 변환될 식별자이다

function getSize(arr:number [] | string [] | boolean [] | object []): number{
	return arr.length;
}
const arr1 = [1,2,3];
getSize(arr1) // 3

const arr2 = ["a", "b", "c", "b"]
getSize(arr2) //

const arr3 = [false, true ,true, false]
getSize(arr3)

const arr4 = [{},{name:"g"},{},{},{}]
getSize(arr4)


이렇게 타입이 하나씩 추가될때마다 함수 유니언타입으로 하나씩 타입을 추가해줘야함
이렇게 귀찮음을 방지해주는게 제네릭!!!!!!!
//위 아래 비교
<T>이거는 타입변수라고 부름

function getSize<T>(arr: T[]): number{
	return arr.length;
}

const arr1 = [1,2,3];
getSize<number>(arr1) // 3

const arr2 = ["a", "b", "c", "b"]
getSize<string>(arr2) //

const arr3 = [false, true ,true, false]
getSize<boolean>(arr3)

const arr4 = [{},{name:"g"},{},{},{}]
getSize<object>(arr4)
//

제네릭 제약조건(타입에 제약조건을 준거임)
T extends U
ex> T string 과 number만 허용 하겠다
<T extends number | string>
<T extends {name: string}>
interface Mytype<T> {
	name: string;
	value: T
}

const data: Mytype<number> = {
	name: "A",
	value: 123
}

const data: Mytype<string> = {
	name: "A",
	value: "aaa"
}

const data: Mytype<boolean> = {
	name: "A",
	value: true
}
=========================================
interface에 원하는 타입만 오게하고싶을때 extends 사용

interface Mytype<T extends number | string> {
	name: string;
	value: T
}

const data: Mytype<number> = {
	name: "A",
	value: 123
}

const data: Mytype<string> = {
	name: "A",
	value: "aaa"
}

const data: Mytype<boolean> = {  xxxxxx 이타입은 못옴
	name: "A",
	value: true
}

방법 2 타입 변수에 할당 
type U = string | number | boolean

interface Mytype<T extends U> {
	name: string;
	value: T
}

const data: Mytype<number> = {
	name: "A",
	value: 123
}

const data: Mytype<string> = {
	name: "A",
	value: "aaa"
}

const data: Mytype<boolean> = {  
	name: "A",
	value: true
}

=============
새로운 interface 3개 생성 ----->
새로운 interface 타입의 객체를 3개 생성
printColor()함수 구현 ----> 객체타입을 매개변수로 받아서
객체.color를 콘솔에 출력해줌

interface changmin1 {
    name: string
    color: string
}

interface changmin2 {
    name: string
    color: string
}

interface changmin3 {
    name: string
}

const chang1: changmin1 = {
    name: "창민",
    color: "흰색"
}

const chang2: changmin2 = {
    name: "창민1",
    color: "블루"
   
}

const chang3: changmin3 = {
    name: "창민2",
}


function printColor<T>(data: T) {    여기서 콘솔창에 필요한 값을 주기위해서 아래 함수처럼 수정해야함
    console.log(data.color)
}

function printColor<T extends {color: String}>(data: T) {  칼라 데이터가 필요하기때문에 extends {color: String} //// String 소문자 쓰면 안됨
    console.log(data.color)
}

printColor(chang1)
printColor(chang2)
//printColor(chang3) //프로퍼티가 없어서 에러 발생

//////////////////////
인터페이스 확장(상속받기) -- 위에는 제약조건임
interface IAnimal {
	name: string
}

interface ICat extends IAnimal {
	sound(): string
}

class Cat implements ICat {
	name: string;
	constructor(name){
		this.name = name;
	}
	sound(){
		return "야옹"
	}
}
같은 이름의 interface 를 여러개 만들 수 있음.
기존에 만들어진 interface에 내용을 추가하는 경우 유용함

interface IName {
	name1: string;
	age: number
}

interface iName {
	name2: string;
}

const namename: IName = {
	name1: "A",
	age: 20,
	name2: "B"
}

////////////////////////////

클래스
class Cat {
	constructor(name, age){
		this.name = name;     //여기를 필드라고 함
		this.age = age;
	}
	sound() {
		console.log("야옹")
	}
}

클래스는 필드와 메소드로 구성되있다
접근제한자 
public: 
의미: 어디서나 자유롭게 접근가능(생략가능) 
클래스 내부에서 접근, 인스턴스 접근가능, 자식 클래스에서도 접근가능
범위: 속성, 메소드

protected(보호)
의미 -> 내 클래스 내부, 자식 클래스 내부에서 접근가능 (인스턴스 접근 안됨)
범위 -> 속성, 메소드

private(사적인)
의미 -> 내 클래스 내부에서 접근가능(자식클래스 접근안됨, 인스턴스 접근 안됨)


클래스 ---> 객체(인스턴스)
타입스크립트 클래스

class Animal {
	kind: string
	constructor(kind){
		this.kind = kind;
	}
}


class Cat extends Animal {
	public name: string;
	public age: number
	constructor(name, age, kind){
.
		super(kind)
		this.name = name;     //여기를 필드라고 함
		this.age = age;
	}
	public printName(){
		console.log(this.name)
		this.sound();
	}
	public sound() {
		console.log("야옹")
	}
}
//클래스를 만든 객체를 인스턴스라고함
const cat1 = new Cat("레오", 4);
인스턴스에서 접근
cat1.sound()
cat1.name
필드, 메소드

정적 멤버  -- 정적 필드, 정적 메소드  static붙이면 정적 멤버임(객체 접근불가)
인스턴스 멤버 - 인스턴스 필드, 인스턴스 메소드


클래스 필드, 메소드

클래스 ---> 객체(클래스의 인스턴스)  --->인스턴스 멤버
접근방법은
let cat = new Cat("레오")
cat.name 는 인스턴스 멤버임

클래스 ---> 정적 멤버
정적멤버 접근 방법은
ClassCat.name2

사용 키워드 abstract 키워드
추상클래스
추상클래스는 상속만 가능하고 인스턴스(객체)를 생성할수 없다

추상메소드
메소드의 이름만 선언하고 구체적인 기능은 상속받는 쪽에서 구현한다.
상속받는 클래스는 모두 다 같은 이름의 메소드를 가지며
구현은 각각 다르게 할 수 있다.

abstract class Person {
	name: string;
	construtor(name){
		this.name = name;
	}
	abstract work(): void;
}

class Teacher extends Person {
	work():void {
		console.log("가르키는 일을 합니다")
	}
}

class Engineer extends Person {
	work():void{
		console.log("가르키는 일을 합니다"
	}
}

const person1 = new Person() 는 생성(사용) 불가


======================2/20
1. props 전달시 props 타입을 interface로 지정해야한다.
ex)
interface HelloProps = {
	name: string
}
const Hello ({name}: HelloProps) => {}
2.상태의 타입의 지정
const [state, setState] = useState<number>(0)
상태타입이 변경되지 않는 경우는 생략해도됨
상태가 null일수도 있고 아닐수도 있을 때 제네릭을 활용하여 지정
ex)
const [state, setState] = useState(0) // 타입 유추 제네릭 타입생략가능
type stateobject = {name: string, age: number}
const [state, setState] = useState<null | stateobject>(null)

3.이벤트 객체의 타입 지정
onChange시 이벤트 객체의 타입
React.ChangeEvent<HTMLInputElement>
onSubmit 이벤트 객체의 타입
React.FormEvent<HTMLFormElement>

///////////////
4. useReducer 사용하기
reducer 함수 생성
// 올수 있는 액션객체를 유니언 타입으로 쭉 나열
type Action = {type: 'INCREASE'} | {type: 'DECREASE'}
function reducer(state: number, action: Action): number {   //카운터를 바꿀거기때문에 상태하고 리턴값 타입은 number

}

=======================2/21
reducerSample.tsx
state{
count: 0,
text: "green",
color: "pink",
isGood: true
}
실습 끝
//////

Context-----> 전역에서 사용가능
1.context생성하기
export const userContext = createContext(초기값)
2.context 사용하기
useContext(userContext)  //초기값
3. context값 지정
<userContext.Provider value ="blue">
<App/>
</userContext.Provider>

props 자식 컴포넌트에게만 전달

SampleContext.tsx 파일 만듬

제네릭타입
전달받은 타입을 사용하도록 함
사용하는 쪽에서 타입을 결정
//////////////
자바에서는
function getSize(arr){
	return arr.length
}

타입스크립트에서는 매개변수에 타입설정, 리턴값에 타입설정
function getSize(arr: string []): number{
	return arr.length
}
//////////// 이건 정리했음

const stateContext = createContext(null)
const dispatchContext = createContext(null)

stateContext <-=------state
dispatchContext <====== dispatch


=================2/22
상태관리
useState<number>()
useReducer(reducer, state)

이번에 배울건
redux사용하기

복습
라이브러리 설치
redux, react-redux
1.스토어 생성하기
createStore(리덕스 모듈)
<Provider store={store}>
<App/>
</Provider>
2.상태값 반환
const todos = useSelector(state => state.todos)
3.상태업데이트
const dispatch = useDispatch()

타입스크립트 지원이 되는지 안되는지 확인
타입스크립트 지원이 안되면 @types/앞에 붙여서 설치
확인방법은
index.d.ts파일이 있는지 확인

설치 
npm install redux react-redux @types/react-redux

리덕스 모듈
1.액션타입, 액션생성함수(있어두되구 없ㅇ두되구), 리듀서


타입스크립트 
as 타입
조건문 비슷함
ex)
as number 
얘는 넘버타입이야!!라고 지정

ReturnType<typeof함수>
특정함수의 반환값을 추론(이 제네릭 안에 함수를 넣어주면 리턴 되는 값을 추론)

사용 예시
interface Person {
	name: string;
}
타입선언
const green:Preson = {name: "aaa"} //타입은 Person

타입단언
const green = {name: "bbb"} as Person // 타입은 Person

*타입 단언을 사용하면 타입체크를 하지 않음
타입체커에게 오류를 무시하도록 함
중간에 {name: "aaa", age: 30}
age가 추가가되면 타입선언은 에러가 발생되는데 타입단언은 에러 없음

예시 실습 AppEx.tsx파일에 있음 확인

redux 실습 시작~~~~

1)리덕스모듈 생성..
2)루트리듀서 생성combineReducers({counter, todos})
3)스토어 생성
createStore(루트리듀서)

4)컴포넌트
1)프레젠테이션 컴포넌트
컨테이너 컴포넌트로부터 상태값을 받아서 화면구현

2)컨테이너컴포넌트
store에 접근(useSelector()), state 업데이트(useDispatch)

//////////////////////
설치 
npm install typesafe-actions

typesafe-actions 라이브러리
리덕스모듈 굉장히 짧게 코드를 줄여줌

//액션 생성 함수

export const toggleTodo = (id:number) => ({
    type: TOGGLE_TODO,
    payload: id
})

export const removeTodo = (id:number) => ({
    type: REMOVE_TODO,
    payload: id
})
export const addTodo = (text:string) => ({
    type: ADD_TODO, 
    payload: {
        id: nextId++, 
        text: text
    }
})


createStandartAction(액션타입)<>
createAction(액션타입)

ex)
action()함수는 약션객체를 만드는 함수
**파라미터와 payload값의 형태가 다를 때
파라미터를 기반으로 커스텀마이징 된 payload설정일때
createAction(ADD_TODO, action =>(text:string)=> 
	action({id:nextId++, text: text})
)
createStandardAction(TOGGLE_TODO)<number>  //<number>에 payload에 들어간 타입 적어줌
createStandardAction(REMOVE_TODO)<number>  //<number>에 payload에 들어간 타입 적어줌

//리듀서
리듀서 생성함수
구문)
createReducer<상태타입, 액션타입>(초기상태값, {
	[액션타입1]:(state, action)=> 리턴값,
	[액션타입2]:(state, {payload: id}) => 리턴값,
	[액션타입3]:(state, {payload: id}) => 리턴값
})
createReducer<상태타입, 액션타입>(초기상태값, {
	[액션타입1]: state =>({ count: state.count + 1}),
	[액션타입1]: state => ({count: state.count + 2})
})

createReducer<상태타입, 액션타입>(초기상태값)
.handleAction(액션타입, state => ({count, state.count + 1})
.handleAction(액션타입, state => ({count, state.count + 2})

다시 정리해보자면

typesafe-actions 라이브러리 적용하기
*리덕스 모듈을 좀더 간결하게 작성
액션타입, 액션생성함수, 리듀서 함수, 상태타입, 액션타입
1.액션타입
const INCREASE = "counter/INCREASE" as const
-=> const INCREASE = "counter/INCREASE"  바뀜
2. 액션생성함수
*액션타입에 type속성만 있는경우


createStandardAction(액션타입)();
*액션객체에 전달하는 속성이 있는 경우(payload 속성이 있는 경우)
1) 전달 받은 타입과 payload타입이 일치하는 경우

ex)
ToggleTodo(1) ---> dispatch({type: TOGGLE_TODO, payload: 1}) << 이 상황일 경우(타입이 일치하는 경우)

createStandardAction(액션타입)<payload값 타입>

ADDTodo("리액트포톨만들기") ====> dispatch({type:ADD_TODO, payload: {id:2, text: "리액트포폴만들기"}})


2) 전달받은 타입과 payload타입이 다를 경우
createAction(액션타입, action => (text:string) => 
	action({
		id: 2,
		text: text
	})
)

3. 액션 객체에 대한 타입
const actions = {액션생성함수1, 액션생성함수2...}
type TodoAction = ActionType<typeof action>

4. 리듀서
const todos = createReducer<액션타입, 액션타입>(상태초기값, {
		[액션타입1]: (state, action) => 상태리턴,
		[액션타입2]: (state, action) => 상태리턴
	})

===========================2/23

npx create-react-app builtin-functions --template typescript

json-server 라이브러리 사용하기
json 파일을 사용하여 간단한 시뮬레이션능 위한 REST API Mock server 구축할 수 있는 툴입니다

설치
npm install -g json-server

구동하기
json-server --watch data.json파일 경로 --port 3003

fetch 전송

실습
db폴더
data.json 작성

cmd창에 써줄것
json-server --watch ./src/db/data.json --port 3003

customhook
useAcync.ts 작성

components 폴더 생성
터미널 2개사용 서버유지상태로 
스타일드 컴포넌트 설치
타입지원이 안되서 npm install @types/styled-components
Header.tsx


vscode-styled-components 받으면 타입스크립트에서 자동완성 지원됨
리스트 홈페이지 완료 여기까지 깃험 등록완료

다음 리스트 등록 페이지 만들거임
설치
npm install @types/react-router-dom



==================2/24



루트리듀서 만들기
combineReducers({todos:todos})

rootState = ReturnType<typeof rootReducer>


//// 타입스크립트로 react-thunk 실습
api폴더
github.ts
npm install axios설치

리듀서 모듈만들기
modules폴더
github.ts

components폴더
GithubForm.tsx
깃허브 뿌려주는 컴포넌트
GithubUser.tsx

유지보수
컨테이너컴퍼넌트
GithubContainer.tsx`


createStandardAction()
createAsyncAction() 함수 비동기 액션을 생성시켜주는 함수
const getUserAsync = createAsyncAction(
	액션타입1, 액션타입2, 액션타입3
)<undefined, >()

modules 폴더에
github폴더 생성
action.ts : 액션타입선언, 
thunk.ts : thunk함수
reducer.ts: reducer함수
types.ts: state타입 액션타입
index.ts 리듀서, 액션, 타입, thunk불러와서 한번에 내보내기
 



/// 자바스크립트 컴포넌트만들기

html
<div id="app"></div>

<script>
	const app = document.querySelector("#app")
	const student = ["stu1", "stu2", "stu3"]
	app.innerHTML = `
	<ul>
		${student.map(s=>`<li>${s}</li>`).join("")}
		['<li>stu1</li>','<li>stu2</li>','<li>stu3</li>']
	</ul>
	`
</script>



class Component{
	target
	constructor(target){
		this.target=target
		this.setup();
		this.render();
	}
	//자식 클래스에서 구현 setup, template, setEvent
	setup(){}
	render(){
		this.target.innerHTML = this.template()
		this.setEvent();
	}
	setState(newState){
		this.state = {...this.state, ...newState}
	}
	setEvent(){}
	template(){return "";}
}


모듈화
한파일안에 모든 기능을 작성하지 않고 작성한 코드를 분할
<script type="module"></script>

Index.html
App.js
Component.js
Student.js



//////////////////////////////////// 3/13 처음부터 복슙 메모장은 객체부터 적었고
비쥬얼스튜디오로 기본타입부터 시작함 typescript-re폴더
객체 Object
let obj: object = {}
let arr : object = []
let func: object = function(){}
let data:object = new Data()

*보다 정확하게 타입 지정을 위해 객체 속성들에 대한
타입을 개별적으로 지정
let user1: {name:string, age:number} = {
	name: "green',
	age: 30
}

*유니온은 | 인터섹션은 &
2개 이상의 타입을 허용하는 경우 이를 유니언이라고함
| (vertical bar) 를 통해 타입을 구분하며 ()를 선택사항
ex) let union: (string|number);
union = 'aaa'
union = 111
*인터섹션(Intersection) & (ampersand)를 사용해 2개 이상의
타입을 조합하는 경우 이를 인터섹션이라고함
interface User {
	name: string,
	age: number
}
interface IsJob {
	isjob: boolean
}

const green: User & IsJob = {
	name: "A"
	age: 30,
	isJob: true
}

///함수
타입스크립트 함수
1. 화살표함수를 사용해서 타입을 지정
let myfun: (매개변수1: 매개변수1타입, 매개변수2: 매개변수2타입) => 리턴타입

myfun = function(x,y) {
	return x + y
}

ex)
let myfun(arg1: number, arg2: number) => number;
myfun = function(x,y) {
	return x + y
}

function add2(a: number, b: number):number {
	return a + b
}

//리턴이 없을 경우
let myfun2(arg1:number, arg2: number) => void;
myfun2 = function(x,y){
	console.log('두수의 합은 ${x+y}입니다.')
}

myfun2 = function(x:number,y:number): void{
	console.log('두수의 합은 ${x+y}입니다.')
}

*옵셔널 매개변수
function printName(name?: stirng){
	return `hello ${name} || 'aaa'`
}




